#!/bin/bash
#PBS -N {{ sweep_id }}
#PBS -J 1-{{ num_jobs }}
#PBS -l walltime={{ walltime }}
#PBS -l {{ resources }}
#PBS -o {{ sweep_dir }}/logs/
#PBS -e {{ sweep_dir }}/logs/

# Create logs directory
mkdir -p {{ sweep_dir }}/logs

# Create tasks directory for organized task outputs
mkdir -p {{ tasks_dir }}

# Array job wrapper
set -e

echo "Array job task: $PBS_ARRAY_INDEX"
echo "Job started at: $(date)"
echo "Running on node: $(hostname)"
echo "Working directory: $(pwd)"

# Change to project directory early to ensure correct paths
cd {{ project_dir }}
echo "Changed to project directory: $(pwd)"

# Validate PBS_ARRAY_INDEX
if [[ -z "$PBS_ARRAY_INDEX" ]]; then
    echo "Error: PBS_ARRAY_INDEX not set. This script should only run as part of an array job."
    exit 1
fi

# Extract parameters for this array index
PARAMS_FILE="{{ sweep_dir }}/parameter_combinations.json"
if [[ ! -f "$PARAMS_FILE" ]]; then
    echo "Error: Parameter combinations file not found: $PARAMS_FILE"
    echo "Current directory: $(pwd)"
    echo "Looking for file: $(realpath $PARAMS_FILE 2>/dev/null || echo $PARAMS_FILE)"
    exit 1
fi

echo "Found parameter combinations file: $PARAMS_FILE"

# Extract parameters using Python
PARAMS_JSON=$({{ python_path }} - <<'PYTHON_EOF'
import json
import sys
import os

params_file = "{{ sweep_dir }}/parameter_combinations.json"
array_index = int(os.environ['PBS_ARRAY_INDEX'])

try:
    with open(params_file, 'r') as f:
        all_combinations = json.load(f)
    
    # Find the combination with matching index
    matching_combo = None
    for combo in all_combinations:
        if combo['index'] == array_index:
            matching_combo = combo
            break
    
    if matching_combo is None:
        print(f"Error: No parameter combination found for index {array_index}", file=sys.stderr)
        sys.exit(1)
    
    # Get the global index for unique task directory naming
    global_index = matching_combo.get('global_index', array_index)
    
    # Convert parameters to command line format for Hydra
    params = matching_combo['params']
    param_strs = []
    for key, value in params.items():
        if isinstance(value, (list, tuple)):
            # Convert list/tuple to Hydra format: [item1,item2,...]
            value_str = str(list(value))  # Ensure it's in list format
            param_strs.append(f'"{key}={value_str}"')
        elif value is None:
            param_strs.append(f'"{key}=null"')
        elif isinstance(value, bool):
            param_strs.append(f'"{key}={str(value).lower()}"')
        elif isinstance(value, str) and (' ' in value or ',' in value):
            # Quote strings that contain spaces or commas
            param_strs.append(f'"{key}={value}"')
        else:
            param_strs.append(f'"{key}={value}"')
    
    # Output: param_string|global_index
    print(f"{' '.join(param_strs)}|{global_index}")
    
except Exception as e:
    print(f"Error processing parameters: {e}", file=sys.stderr)
    sys.exit(1)
PYTHON_EOF
)

if [[ $? -ne 0 ]]; then
    echo "Error extracting parameters for array index $PBS_ARRAY_INDEX"
    exit 1
fi

# Split the output to get params and global index
IFS='|' read -r PARAMS_JSON GLOBAL_INDEX <<< "$PARAMS_JSON"

echo "Parameters: $PARAMS_JSON"
echo "Global task index: $GLOBAL_INDEX"

# Create a unique output directory for this task using global index
TASK_OUTPUT_DIR="{{ tasks_dir }}/task_${GLOBAL_INDEX}"
mkdir -p "$TASK_OUTPUT_DIR"

# Save task info
echo "PBS Array Index: $PBS_ARRAY_INDEX" > "$TASK_OUTPUT_DIR/task_info.txt"
echo "Global Task Index: $GLOBAL_INDEX" >> "$TASK_OUTPUT_DIR/task_info.txt"
echo "Parameters: $PARAMS_JSON" >> "$TASK_OUTPUT_DIR/task_info.txt"
echo "Started: $(date)" >> "$TASK_OUTPUT_DIR/task_info.txt"
echo "Node: $(hostname)" >> "$TASK_OUTPUT_DIR/task_info.txt"

# Construct and run the training command
{% if wandb_group %}
WANDB_GROUP="{{ wandb_group }}"
{% else %}
WANDB_GROUP="{{ sweep_id }}"
{% endif %}

COMMAND="{{ python_path }} {{ script_path }} $PARAMS_JSON wandb.group=$WANDB_GROUP"

echo "Executing: $COMMAND"
echo "$COMMAND" > "$TASK_OUTPUT_DIR/command.txt"

# Run the training script
if eval "$COMMAND"; then
    echo "Task completed successfully at: $(date)"
    echo "Completed: $(date)" >> "$TASK_OUTPUT_DIR/task_info.txt"
    echo "Status: SUCCESS" >> "$TASK_OUTPUT_DIR/task_info.txt"
else
    exit_code=$?
    echo "Task failed with exit code: $exit_code at: $(date)"
    echo "Failed: $(date)" >> "$TASK_OUTPUT_DIR/task_info.txt"
    echo "Status: FAILED" >> "$TASK_OUTPUT_DIR/task_info.txt"
    echo "Exit Code: $exit_code" >> "$TASK_OUTPUT_DIR/task_info.txt"
    exit $exit_code
fi 